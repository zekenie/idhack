{
  "name": "sails-migrations",
  "version": "0.0.3",
  "description": "The missing, migrations, arm of the octopus",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "mocha test/specs"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/BlueHotDog/sails-migrations.git"
  },
  "keywords": [
    "sails",
    "sailsjs",
    "sails.js",
    "migrations",
    "waterline"
  ],
  "author": {
    "name": "BlueHotDog"
  },
  "contributors": [
    {
      "name": "Danni Friedland"
    },
    {
      "name": "Itay Adler"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://sails.mit-license.org/"
    }
  ],
  "files": [
    "lib",
    "tasks",
    "LICENSE",
    "README.md"
  ],
  "bugs": {
    "url": "https://github.com/BlueHotDog/sails-migrations/issues"
  },
  "homepage": "https://github.com/BlueHotDog/sails-migrations",
  "dependencies": {
    "waterline": "~0.9",
    "coffee-script": "~1.6",
    "grunt": "~0.4",
    "gake": "~0.1",
    "lodash": "~2.4",
    "bluebird": "~1.0",
    "glob": "~3.2",
    "dot": "~1.0",
    "moment": "~2.5",
    "underscore.string": "~2.3",
    "mkdirp": "~0.3",
    "simplesets": "~1.2",
    "async": "~0.2"
  },
  "peerDependencies": {
    "grunt": "~0.4",
    "gake": "",
    "sails": "~0.9"
  },
  "devDependencies": {
    "mocha": "~1.16",
    "should": "~2.1",
    "sinon": "~1.7",
    "chai": "~1.8"
  },
  "readme": "# sails-migrations\n\n[![NPM version](https://badge.fury.io/js/sails-migrations.png)](http://badge.fury.io/js/sails-migrations)\n[![Dependency Status](https://gemnasium.com/BlueHotDog/sails-migrations.png)](https://gemnasium.com/BlueHotDog/sails-migrations)\n[![Code Climate](https://codeclimate.com/github/BlueHotDog/sails-migrations.png)](https://codeclimate.com/github/BlueHotDog/sails-migrations)\n\nsails-migrations provides an easy way to manage database migrations, much like Rails does.\nThis means you can have fine-grained control over your schema/data transformations between versions.\n\n## Installing:\n\nsails-migrations' only dependencies are Sails and mysql/postgres (currently) adapters,\nTo install run:\n\n```bash\nnpm install --save sails-migrations\n```\n## Example app\n\nYou can checkout an [example Sails](https://github.com/itayadler/sails-migrations-testapp).\n\n\n## Initializing your database\n\nBefore running any migrations, you need to verify your database exists, you can do that by running:\n\n```bash\ngrunt db:create\n```\n\nThis should create an empty database with the _sails\\_schema\\_migrations_  table - which is used to track what migrations were run against this db.\n\n## Working with migrations\n\nA migration constitutes of two parts:\n\n- `up`: determines what should be performed when you want to forward your database to this version.\n- `down`: should be the exact reverse of the up method, so, for example, if on the up phase you created a table, the down phase should delete that table.\n\nEach phase (`up`/`down`) will receive two `parameters`:\n\n1. `adapter` - A thin wrapper around Sails adapter to provide better, more functional way, of working with migrations, see [Adapter](#adapter_api) for more info.\n2. `done` - callback\n\n## Creating a migration:\n\nTo create a new migration, simply run:\n```bash\ngrunt migration:generate --name=\"my migration name\"\n```\nThis should create a new file within the **db/migrations** folder called [YYYYMMDDHHMMSS]\\_my\\_migration\\_name.js\n\nsails-migrations uses the timestamp to determine both the order of the migrations and which migrations were run.\n\n## Example of a basic migration file\n\n```javascript\n/*\n* Sails migration\n* Created at 25/01/1985\n* */\n\nexports.up = function(adapter, done) {\n\tadapter.define('tableName', {name: {type: 'STRING'}}, done);\n};\n\nexports.down = function(adapter, done) {\n\tadapter.drop('tableName', done);\n};\n\n```\n\n## Migration CLI\n\n- ```grunt db:migrate```: By default, runs migrations up to the latest migration available\n  - _[--version=]_ - _optional_ - up to which version to run the migrations(inclusive)\n- ```grunt db:rollback```: By default, runs the down step of the latest migration executed\n  - _[--steps=1]_ - _optional_ How many rollbacks to perform, default is 1\n- ```grunt db:drop```: Drops the database\n- ```grunt db:create```: Creates an empty database(with the [sails_schema_migrations](#sails_schema_migrations) table)\n- ```grunt db:reset```: Drops & Creates the database\n- ```grunt db:status```: Prints out the status of each migration in the migration folder\n\n## <a id=\"adapter_api\"></a>Adapter API\n\n-  **define**: (tableName, definition, cb) - Defines a new table\n\t- **tableName** - Table name to create\n\t- **definition** - Same as the attributes given to sails model\n\t- **cb** - called with err,schema\n\t- **example** -\n\n\t\t```javascript\n\t\t\tdefinition = {\n\t\t\t\tfirst_name: {type: 'STRING'},\n\t\t\t\tlast_name: {type: 'STRING'},\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'INTEGER',\n\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\tdefaultsTo: 'AUTO_INCREMENT',\n\t\t\t\t\tprimaryKey: true\n\t\t\t\t}\n\t\t\t}\n\t\t\tadapter.define('myTable', definition, function (err, schema) {\n\t\t\t\t//do something\n\t\t\t})\n\t\t```\n- **drop**: (tableName, cb) - Drops a table\n\t- **tableName** - Table name of the table to drop\n\t- **cb** - called with err,schema\n\t- **example** -\n\n\t```javascript\n\t\tadapter.drop('myTable', done)\n\t```\n- **addAttribute**: (tableName, attrName, attrDef, cb) - adds a column to an existing table\n\t- **tableName** - Table name to which to add the column\n\t- **attrName** - Name of the attribute to add\n\t- **attrDef** - Same as in waterline model\n\t- **example** -\n\n\t```javascript\n\t\tadapter.addAttribute('myTable', 'phoneNumber', {type:'INTEGER'}, done);\n\t```\n- **removeAttribute**: (tableName, attrName, cb) - removes a column from an existing table\n\t-  **tableName** - Table name from which to remove the attribute\n\t-  **attrName** - Attribute to remove\n\t- **cb** - called with err if any\n\t- **example** -\n\n\t```javascript\n\t\tadapter.removeAttribute('myTable', 'phoneNumber', done);\n\t```\n- **query**: (query, data, cb)\n\t-\t**query** - a String query to execute directly against the DB\n\t-\t**data** - used to incorpurate values into the query\n\t-\t**cb**\n- **describe**: (tableName, cb) - returns a definition of a table, i.e its schema\n\t- **tableName** - the table name to describe\n\t- **cb** called with err,attributes, when schema is a hash of the following format:\n\n\t```javascript\n\t\t{\n\t\t\tid: {\n\t\t\t\t\ttype: 'INTEGER',\n\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\tdefaultsTo: 'AUTO_INCREMENT',\n\t\t\t\t\tprimaryKey: true\n\t\t\t\t}\n\t\t}\n\t```\n",
  "readmeFilename": "README.md",
  "_id": "sails-migrations@0.0.3",
  "dist": {
    "shasum": "70e810ef28bb9bea6a19f616891657d02ab12d47"
  },
  "_from": "sails-migrations@",
  "_resolved": "https://registry.npmjs.org/sails-migrations/-/sails-migrations-0.0.3.tgz"
}
